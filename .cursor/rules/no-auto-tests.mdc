---
alwaysApply: true
description: Allow writing new meaningful tests for newly implemented code while forbidding any modification to existing human-authored tests.
---
# Test authoring policy: new tests allowed, existing tests immutable

The assistant may write meaningful new initial tests for code it implements and must ensure the full test suite passes. The assistant must not modify existing tests, if a test needs modification due to changing needs, a human review is required.

## Allowed

- Write new, meaningful tests (unit/integration/e2e as appropriate) for new or modified functionality introduced in the current change.
- Create new test helpers/fixtures used by the new tests.
- Use language/framework conventions for assertions and structure (e.g., Jest/Vitest, pytest, Go testing, RSpec, JUnit, cargo).
- Delete tests only when the user explicitly requests deletion.
- Ensure all tests pass. If existing tests fail, do not change themâ€”adjust the implementation or clarify requirements instead to see if the test need updating.

## Disallowed

- Editing or deleting existing human-authored tests, fixtures, snapshots, or shared helpers used by existing tests.
- Updating assertions or behavior in existing tests to fit the new implementation.
- Modifying snapshot files generated by existing tests.

## Language guidance (non-exhaustive)

- JS/TS (Jest/Vitest): create `*.test.ts(x)` / `*.spec.ts(x)` with real assertions for new code paths.
- Python (pytest): create `test_*.py` with fixtures as needed for new code; do not edit existing tests.
- Go (testing): create `*_test.go` with table-driven tests for new packages/functions; keep existing tests untouched.
- Ruby (RSpec): create `*_spec.rb` specs for new behavior; avoid changing existing specs.
- Java/Kotlin (JUnit): add new `@Test` methods/classes for new functionality only.
- Rust: add new tests under `tests/` or module tests for new code; leave existing tests as-is.

## Planning tie-in

- When a feature plan defines "High-level test interfaces", implement the corresponding tests with real assertions for new functionality. See [FEATURE_PLANNING_TEMPLATE.md](mdc:docs/templates/FEATURE_PLANNING_TEMPLATE.md).
- Ensure PRs link the plan and that tests were added per the plan; see [pull_request_template.md](mdc:.github/pull_request_template.md).

